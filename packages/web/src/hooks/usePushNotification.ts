import { useEffect, useState } from "react";

import { urlBase64ToUint8Array } from "@/core/util/crypto";
import { isDeployedStage } from "@/core/util/stage";
import { pushSubscriptionJsonSchema } from "@/core/web-push/schema";
import {
  getVapidPublicKey,
  sendNotification,
  subscribeUser,
  unsubscribeUser,
} from "@/lib/api/push-notification";

const sstStage = import.meta.env.VITE_SST_STAGE;

const isDeployed = isDeployedStage(sstStage);
/**
 * React hook for managing push notifications
 *
 * Provides functionality to check support, register service worker,
 * subscribe/unsubscribe to push notifications, and send test notifications
 */
export function usePushNotification() {
  const [isSupported, setIsSupported] = useState(false);
  const [subscription, setSubscription] = useState<PushSubscription | null>(
    null,
  );
  const [message, setMessage] = useState("");

  useEffect(() => {
    if ("serviceWorker" in navigator && "PushManager" in window) {
      setIsSupported(true);
      registerServiceWorker();
    }
  }, []);

  async function registerServiceWorker() {
    // Use the existing service worker
    const serviceWorkerPath = isDeployed
      ? "/prompt-sw.ts"
      : "/dev-sw.js?dev-sw";
    const registration = await navigator.serviceWorker.register(
      serviceWorkerPath,
      {
        scope: "/",
        updateViaCache: "none",
        // In development, the dev-sw generated by vite-plugin-pwa is an ES module and must be registered with `type: "module"`
        ...(isDeployed ? {} : { type: "module" }),
      },
    );
    const subscription = await registration.pushManager.getSubscription();
    // no subscription exists
    if (!subscription) {
      setSubscription(null);
      return;
    }
    setSubscription(subscription);
  }

  async function subscribeToPush() {
    const registration = await navigator.serviceWorker.ready;
    const {
      data: { vapidPublicKey },
    } = await getVapidPublicKey();
    const sub = await registration.pushManager.subscribe({
      userVisibleOnly: true,
      // Using the same application server key as in prompt-sw.ts
      applicationServerKey: urlBase64ToUint8Array(vapidPublicKey),
    });

    setSubscription(sub);
    // Use parsePushSubscription to validate and parse the subscription JSON
    const subJson = pushSubscriptionJsonSchema.parse(sub.toJSON());
    // Send the subscription to the server
    await subscribeUser(subJson);
    return true;
  }

  async function unsubscribeFromPush() {
    await subscription?.unsubscribe();
    setSubscription(null);
    await unsubscribeUser();
  }

  async function sendTestNotification({
    title,
    message,
  }: {
    title: string;
    message: string;
  }) {
    if (subscription) {
      const subJson = pushSubscriptionJsonSchema.parse(subscription.toJSON());
      await sendNotification({ subscription: subJson, title, message });
      setMessage("");
      return true;
    }
    return false;
  }

  return {
    isSupported,
    subscription,
    message,
    setMessage,
    // Actions
    registerServiceWorker,
    subscribeToPush,
    unsubscribeFromPush,
    sendTestNotification,

    // Helper properties
    isSubscribed: !!subscription,
  };
}
